/* src/pages/PetPage.css */
.pet-page {
  position: relative; 
  width: 100%;
  height: 100vh;
  background-color: #f0f8ff; 
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 0 5px 10px 5px;
  box-sizing: border-box;
}

/* Coin display */
.coin-display {
  position: absolute;
  top: 10px;
  right: 10px;
  z-index: 1000;
}

/* New bordered pet room container */
.pet-room-bordered-container {
  position: relative;
  width: min(100%, 500px);
  height: min(97vh, 820px);
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  background-color: #ffffff;
  aspect-ratio: 9/16;
}

/* Explicitly set the pet room container height to leave room for the UI bar */
.pet-room-inner-container {
  position: relative;
  width: 100%;
  height: calc(100% - 70px);
  background-color: #fff;
  border-bottom: 2px solid #eaeaea;
  overflow: hidden;
  transition: all 0.3s ease;
}

/* Edit mode styling */
.pet-page.edit-mode .pet-room-inner-container {
  /* Remove brightness filter to prevent blurry effect */
}

.pet-page.edit-mode .coin-display {
  display: none !important;
}

/* Hide furniture in PetRoom when in edit mode to prevent double rendering */
.pet-page.edit-mode .decor {
  display: none !important;
}

/* Hide pet in PetRoom when in edit mode to prevent stacking context issues */
.pet-page.edit-mode .pet-room-inner-container .pet-layer {
  display: none !important;
}

/* Hide decoration button in edit mode since it's now in the panel */
.pet-page.edit-mode .decoration-button {
  display: none !important;
}

/* Lower pet z-index during edit mode so back layer items appear behind it */
.pet-page.edit-mode .pet-layer {
  z-index: 35 !important;
  pointer-events: none !important;
}

/* More specific rule to ensure it overrides other pet z-index rules */
.pet-page.edit-mode .pet-room-inner-container .pet-layer {
  z-index: 35 !important;
  pointer-events: none !important;
}

/* Pet room container */
.pet-container, .pet-room {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.loading-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 18px;
  color: #555;
}

/* Border UI area containing controls and need indicators */
.pet-room-border-ui {
  position: relative; 
  width: 100%;
  height: 70px;
  background-color: #ffffff;
  display: flex;
  align-items: center;
  padding: 0;
  box-sizing: border-box;
}

/* Decoration button positioned like a Tamagotchi menu button */
.decoration-button {
  position: absolute;
  width: 40px;
  height: 40px;
  min-width: 40px;
  border-radius: 50%;
  background-color: #ffffff;
  border: 2px solid #e8e8e8;
  left: 15px;
  top: 50%;
  transform: translateY(-50%);
  z-index: 20;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  cursor: pointer;
  transition: transform 0.2s;
}

.decoration-button:hover {
  transform: translateY(-50%) scale(1.1);
  background-color: #f5f5f5;
}

.decoration-button img {
  width: 28px;
  height: 28px;
  object-fit: contain;
  filter: drop-shadow(0 1px 2px rgba(0,0,0,0.1));
}

/* Need indicators container - centered in the UI area */
.need-indicators {
  display: flex;
  justify-content: center;
  align-items: center;
  padding-left: 70px; /* Space for decoration button */
  padding-right: 15px;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
}

/* Add a Tamagotchi-like title */
.pet-room-title {
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(255, 255, 255, 0.9);
  font-size: 0.9rem;
  font-weight: bold;
  color: #333;
  padding: 3px 10px;
  border-radius: 12px 12px 0 0;
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* Room background layers styling */
.room-background-layers {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
}

.room-background-layers img {
  position: absolute;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Layer z-indexes */
.ceiling { z-index: 1; }
.wall { z-index: 2; }
.floor { z-index: 3; }
.decor { 
  position: absolute; 
  /* Don't set fixed width/height to allow parent container to control sizing */
  object-fit: contain;
}
.overlay { z-index: 7; pointer-events: none; }

/* Pet styling for proper scaling with container */
.pet-layer {
  position: absolute;
  width: clamp(200px, 45%, 400px);
  height: auto;   
  object-fit: contain; 
  display: block;
  transition: left 3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s ease;
  transform-origin: bottom center;
  margin-bottom: -20px;
  will-change: left, transform;
  z-index: 6;
  bottom: 20%;
}

.pet-layer.flip {
  transform: scaleX(-1);
}

.pet-layer.waddling {
  animation: petWaddle 2s infinite;
}

.pet-layer.playing {
  animation: petPlay 2s infinite;
}

.pet-layer.pet-eating {
  animation: petEat 1s infinite;
}

.pet-mood-bubble {
  position: absolute;
  background-color: rgba(255, 255, 255, 0.9); 
  padding: clamp(4px, 1vw, 6px) clamp(8px, 2vw, 12px);
  border-radius: 15px; 
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  max-width: min(200px, 80vw);
  max-height: max-content;
  text-align: center;
  z-index: 7;
  font-size: clamp(12px, 3vw, 14px);
  animation: fadeInOut 0.3s ease-in-out;
  pointer-events: none;
  bottom: calc(42% + 10px);
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  justify-content: center;
}

.pet-mood-bubble::after { 
  content: '';
  position: absolute;
  bottom: -7px; 
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 0;
  border-left: 7px solid transparent;
  border-right: 7px solid transparent;
  border-top: 9px solid rgba(255, 255, 255, 0.9); 
}

.pet-mood-bubble p {
  margin: 0;
  font-size: clamp(12px, 3vw, 14px);
  color: #333;
  line-height: 1.3;
  padding: 0;
}

.toy {
  position: absolute;
  width: clamp(80px, 18vw, 160px);
  height: auto;
  object-fit: contain;
  transition: transform 0.3s ease;
  transform-origin: center center;
}

.toy.playing {
  animation: toyPlay 2s infinite;
}

.food-item {
  position: absolute;
  bottom: 20%;
  height: clamp(60px, 15vw, 120px);
  width: auto;
  transform: translateX(-50%);
  z-index: 50;
}

.trim-layer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 4;
}

@keyframes petPlay {
  0% {
    transform: scaleY(1);
  }
  25% {
    transform: scaleY(0.95) translateY(2%);
  }
  50% {
    transform: scaleY(1);
  }
  75% {
    transform: scaleY(0.95) translateY(2%);
  }
  100% {
    transform: scaleY(1);
  }
}

@keyframes petWaddle {
  0% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(-2deg);
  }
  50% {
    transform: rotate(0deg);
  }
  75% {
    transform: rotate(2deg);
  }
  100% {
    transform: rotate(0deg);
  }
}

.pet-layer.flip.waddling {
  animation: petWaddleFlip 2s infinite;
}

@keyframes petWaddleFlip {
  0% {
    transform: scaleX(-1) rotate(0deg);
  }
  25% {
    transform: scaleX(-1) rotate(-2deg);
  }
  50% {
    transform: scaleX(-1) rotate(0deg);
  }
  75% {
    transform: scaleX(-1) rotate(2deg);
  }
  100% {
    transform: scaleX(-1) rotate(0deg);
  }
}

@keyframes petEat {
  0% {
    transform: scaleY(1);
  }
  50% {
    transform: scaleY(0.95) translateY(1%);
  }
  100% {
    transform: scaleY(1);
  }
}

.pet-layer.flip.pet-eating {
  animation: petEatFlip 1s infinite;
}

@keyframes petEatFlip {
  0% {
    transform: scaleX(-1) scaleY(1);
  }
  50% {
    transform: scaleX(-1) scaleY(0.95) translateY(1%);
  }
  100% {
    transform: scaleX(-1) scaleY(1);
  }
}

@keyframes toyPlay {
  0% {
    transform: translateX(0) rotate(0deg);
  }
  25% {
    transform: translateX(15px) rotate(15deg) translateY(-5px);
  }
  50% {
    transform: translateX(0) rotate(0deg);
  }
  75% {
    transform: translateX(-15px) rotate(-15deg) translateY(-5px);
  }
  100% {
    transform: translateX(0) rotate(0deg);
  }
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
    transform: translateX(-50%) translateY(10px);
  }
  100% {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

/* For smaller screens, scale elements down */
@media (max-height: 600px) {
  .pet-room-inner-container {
    height: calc(100% - 60px);
  }
  
  .pet-room-border-ui {
    height: 60px;
  }
  
  .decoration-button {
    width: 35px;
    height: 35px;
    min-width: 35px;
  }
  
  .pet-layer {
    width: clamp(150px, 40%, 300px);
  }
}

/* For wider screens, allow more room width and reduce side padding further */
@media (min-width: 768px) {
  .pet-page {
    padding: 0 2px 10px 2px; /* Even less side padding on larger screens */
  }
  
  .pet-room-bordered-container {
    width: min(100%, 600px); /* Allow more width on tablets and larger */
  }
}

/* For very wide screens (desktop), maximize usage of available space */
@media (min-width: 1024px) {
  .pet-page {
    padding: 0 0 10px 0; /* No side padding on desktop */
  }
  
  .pet-room-bordered-container {
    width: min(100%, 700px); /* Even more width on desktop */
    max-width: calc(100vh * 9/16); /* Respect aspect ratio but use available height */
  }
}

/* For ultra-wide screens, prevent the room from getting too wide */
@media (min-width: 1440px) {
  .pet-room-bordered-container {
    width: min(100%, 800px);
    max-width: calc(100vh * 9/16);
  }
}

